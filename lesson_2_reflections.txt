What happens when you initialize a repository? 
Why do you need to do it?

When a repository is initialized, an empty 
git repository is created in the current 
location.  This repository contains 
any untracked files and directories 
in the new directory at the time the new 
repository was created.

We need to initialize a repository because 
this is how git will recognize that it is 
a repository thus allowing git to, among others, 
track files, commits, logs of the files, etc.
--------------

How is the staging area different from the working 
directory and the repository? 
What value do you think it offers?

The staging area is different from the working 
directory in the sense that the former is where 
files are added, before they are committed. The  
latter, on the other hand, is the current directory 
where one will be working from and this directory 
may or may not even be a added to a repository yet.
The staging area is different from the repository 
in the sense that the latter contains all the files 
that comprise a repository whereas the former only 
contains files that you want added to the repository.

The concept of a staging area offers value as an 
intermediary, a sandbox so to speak, that holds 
files prior to being committed.  This way, files 
could be safely removed without affecting what's 
in the working directory.
-----------------

How can you use the staging area to make sure you 
have one commit per logical change?

I can do so by running a "git diff".  This 
command compares what's in my working directory 
and what's in the staging area.  By viewing the 
differences, I can decide if I have made enough 
of a logical change to warrant committing to the 
actual repository.
--------------

What are some situations when branches would be
helpful in keeping your history organized? How would 
branches help?

Some situations when branches would be helpful and 
how they would help:
- I am working on a major release where a new 
feature will be added to the current code base.  
I don't want to mess with the master while doing this 
but I do need to commit some bug fixes that exist 
in production.

- I am working on something experimental which may or 
may not be accepted. In this case, there is no need 
risking working on the master.   can work on a branch 
which can be easily deleted afterwards
---------------

How do the diagrams help you visualize the branch structure?

Diagrams help me visualize the branch structure by 
providing a graphical representation of the "tree" 
structure. By so doing, I can better understand 
the "layout" of the code base and know the history 
of the branch.
--------------

What is the result of merging two branches together? 
Why do we represent it in the diagram the way we do?

The result of merging 2 branches together is 1 
merged branch that contains changes from both branches.  
We represent it in the diagram the way we do to signify 
a "union" of the 2 branches into 1 merged branch.
-------------

What are the pros and cons of Git's automatic merging vs. 
always doing merges manually?

Pros:
- Git can make pretty good guesses as to what needs to be 
merged

- We don't have to go in to each file, examine every line and 
determine what needs to be merged

Cons:
- If the exact same lines were modified in each file, Git 
can't determine which line is the right one and will 
respond with a conflict status

- It is possible that the automatic merge doesn't merge properly 
and that with no error message, the merged code is assumed to be 
working properly.  This could could then go undetected in, say, 
production code.  By the time the issue manifests itself, it 
might be too late and even at that, weeding out the bug may 
not be so easy.