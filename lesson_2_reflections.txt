What happens when you initialize a repository? 
Why do you need to do it?

When a repository is initialized, an empty 
git repository is created in the current 
location.  This repository contains 
any untracked files and directories 
in the new directory at the time the new 
repository was created.

We need to initialize a repository because 
this is how git will recognize that it is 
a repository thus allowing git to, among others, 
track files, commits, logs of the files, etc.
--------------

How is the staging area different from the working 
directory and the repository? 
What value do you think it offers?

The staging area is different from the working 
directory in the sense that the former is where 
files are added, before they are committed. The  
latter, on the other hand, is the current directory 
where one will be working from and this directory 
may or may not even be a added to a repository yet.
The staging area is different from the repository 
in the sense that the latter contains all the files 
that comprise a repository whereas the former only 
contains files that you want added to the repository.

The concept of a staging area offers value as an 
intermediary, a sandbox so to speak, that holds 
files prior to being committed.  This way, files 
could be safely removed without affecting what's 
in the working directory.
-----------------

How can you use the staging area to make sure you 
have one commit per logical change?

I can do so by running a "git diff".  This 
command compares what's in my working directory 
and what's in the staging area.  By viewing the 
differences, I can decide if I have made enough 
of a logical change to warrant committing to the 
actual repository.
--------------

